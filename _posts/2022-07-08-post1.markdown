---
layout: post
title: 정보처리기사 실기 2회 - 오답노트
date: 2022-07-08 20:01:00 +0900
category: 정보처리기사
---

# 정보처리기사 실기 2회 - 오답노트

> 정보처리기사 실기 2회 풀고 오답정리 (오답 왕 많음 주의)

오늘은 정처기 실기 오답노트 근데 공부 안하고 문제부터 풀었더니 모르는거 왕많음

## 📍애드 혹 네트워크 (Ad-hoc Network)

- 네트워크 장치를 필요로 하지 않고, 네트워크 토폴로지가 동적으로 변환되는 특징이 있으며 응용분야로는 긴급구조, 긴급회의, 전쟁터에서의 군사 네트워크에서 사용된다.
- 고정된 기반 망의 도움없이 이동 노드들 간에 자율적으로 구성되는 망으로서, 네트워크에 자율성과 융통성을 부여한 차세대 네트워크 기술이다!
- ✅토폴로지란(topology)? 컴퓨터 네트워크의 요소들(링크, 노드 등)을 물리적으로 연결해 놓은 것 또는 그 연결방식을 말함

## 📍트렌잭션의 특성

- Atomicity(원자성) : 트랜잭션의 연산은 데이터베이스에 **모두 반영**되도록 완료(commit)되든지 아니면 **전혀 반영되지 않도록** 복구(rollback)되어야 한다.
- Consitency(일관성) : 시스템이 가지고 있는 고정요소는 **트랜잭션 수행 전과 트랜잭션 수행 완료 후의 상태가 같아야 한다**
- Isolation(독립성) : 둘 이상의 트랜잭션이 동시에 병행실행되는 경우, **어느 하나의 트랜잭션 실행중에 다른 트랜잭션의 연산이 끼어들 수 없다.**
- Durability(영속성,지속성) : **성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영**되어야 한다.

## 📍정규화 단계

- 1NF : **도**메인이 원자값을 가져야 함
- 2NF : **부**분함수 종속성을 제거해야 함
- 3NF : **이**행 함수 종속성을 제거해야 함
- BCNF : 모든 **결**정자가 후보키 집합에 속한 정규형
- 4NF : **다**중 값 종속을 제거해야 함
- 5NF : **조**인 종속성을 제거해야 함

## 📍SQL 문법

- CREATE (테이블 생성)

  - **CREATE** TABLE student (
    칼럼명 타입 조건(not null 등),
    칼럼명 타입 조건(not null 등),
    칼럼명 타입 조건(not null 등),
    PRIMARY KEY ~~
    );

- INSERT (삽입)

  - **INSERT INTO** student values (테이블에 맞는 데이터 양식);

- UPDATE (수정)

  - **UPDATE** 테이블명 **SET** 컬럼=값 WHERE 조건;

- DELETE (삭제)

  - **DELETE** FROM 테이블 WHERE 조건;

- SELECT (조회)

  - **SELECT** \* FROM student;
  - **SELECT** age, name FROM student;

- SELECT 문법 순서

  1. SELECT
  2. FROM
  3. WHERE
  4. GROUP BY
  5. HAVING
  6. ORDER BY

  - 실행순서는 2>3>4>5>1>6

- WHERE (조건)

  - SELECT \* FROM student **WHERE** id=1;
  - SELECT \* FROM student **WHERE** name='유%'; (like 조건)

- LIMIT (조회 결과 행수의 제한)

  - SELECT \* FROME student **limit** 1;

- GROUP BY (그룹화)

  - SELECT age FROM student GROUP BY age;

- ORDER BY (정렬)

  - SELECT age FROM student ORDER BY DESC; (오름차순은 ASC)

- DISTINCT (중복행 제거)

  - SELECT DISTINCT name FROM student;

- ALIAS (별칭)

  - SELECT age **'나이'** FROM student WHERE id = 3;

## 📍python >> 기호 (쉬프트연산자)

- 왼쪽 쉬프트 연산은 2를 곱하는 효과가 있다
- 오른쪽 쉬프트 연산은 2를 나누는 효과가 있다
- a >> 1 하면 2를 한번 나눠주면 되고, a >> 2하면 2를 두번 나눠주면(4를 나눠주면) 된다! (<<는 반대로 곱해주면 됨)

## 📍암호 알고리즘

- 대칭 키 암호
  - 블록암호
    - DES : 54비트의 키와 64비트의 블록
    - AES : **DES를 대체**하며, 128비트 블록크기, 128, 192, 256 비트 키 크기
  - 스트림 암호
    - RC4
- 비대칭 키 암호
  - 디피헬만
  - RSA : 소인수 분해의 어려움을 이용하여 암호화
- 해시
  - SHA : 미국 표준
  - MD5 : 128비트 해시 알고리즘, 로널드 라이베스트가 예전에 쓰이던 MD4를 대체하기 위해 고안한 128비트 암호화 해시함수

## 📍화이트박스 테스트 검증 기준

- 문장 검증기준 : 소스코드의 **모든 구문을 한 번 이상 수행**되도록 항목 설계
- 분기 검증기준 : 소스코드의 **모든 조건문을 한 번 이상 수행**되도록 항목 설계
- 조건 검증기준 : 소스코드의 **모든 조건문의 참, 거짓을 각 한번 이상 수행**되도록 항목 설계
- 분기/조건 기준 : 소스코드의 **모든 조건문과 각 조건문에 포함된 개별 조건식의 결과가 참, 거짓인 경우 각 한 번 이상 수행**되도록 항목 설계

## 📍블랙박스 테스트 종류

- 동치분할 테스트 : 정상적인 입력자료와 비정상적인 입력자료의 개수를 균등하게 해서 테스트케이스를 정하고, 해당 입력자료에 맞는 결과가 출력되는지 확인하는 기법
- 경계값 분석 : 입력조건의 중간값보다 경계값에서 오류발생 확률이 높기 때문에, 경계값을 테스트케이스로 선정하여 검사하는 기법
- 원인-효과 그래프 검사 : 여러 입출력 데이터를 분석해서 영향을 미치는 상황을 체계적으로 분석한 다음 효율성이 높은 테스트케이스를 선정하는 기법
- 오류 예측 검사 : 과거의 경험이나 확인자의 감각으로 테스트
- 비교 검사 : 동일한 테스트 케이스를 여러버전의 프로그램에 적용하여 동일한 결과가 출력되는지 비교하는 테스팅 기법

#### 응집도와 결합도는 모듈의 독립성을 측정할 때 사용한다고 함! 모듈은 독립성이 높을수록 좋은데, 왜냐면 해당 모듈을 수정해도 다른 모듈에 끼치는 영향이 적어서 오류가 발생하더라도 쉽게 문제를 발견하고 해결할 수 있는 장점을 가진다고 한다!

## 📍응집도

- 한 모듈 내부의 처리요소들이 서로 관련되어 있는 정도를 말한다. 모듈은 높은 응집도를 가질수록 좋다!
- 모듈은 응집된 정도에 따라 7개로 구분된다.
  - 기능적 응집도 : 응집도가 가장 높으며 가장 좋은 형태! 모듈 내의 모든 요소들이 하나의 기능을 수행하기 위해 구성된 경우를 말한다
  - 순차적 응집도 : 한 요소의 출력이 다른 요소의 입력으로 사용되는 형태이다. 어떤 모듈이 특정 파일을 읽고 처리하는 기능을 하는 등과 같다.
  - 통신적 응집도 : 모든 요소들이 동일한 입력 또는 출력데이터를 사용하여 서로 다른 기능을 수행하는 경우다. 처리순서가 중요하지 않다.
  - 절차적 응집도 : 모듈내에서 여러개의 기능 요소가 순차적으로 수행되지만 다음 기능요소로 데이터가 아닌 흐름 제어요소가 전달되는 경우다. (파일 읽을때 접근허가 확인 후 읽는 형태)
  - 일시적 응집도 : 각 기능 요소들이 순서에 상관없이 특정 시점에 반드시 수행되는 경우다
  - 논리적 응집도 : 유사한 성격을 갖거나 특정 형태로 분류되는 처리요소들로 모듈을 구성하며 논리적으로 비슷한 기능을 수행하지만 서로의 관계는 밀접하지 않은 형태다.
  - 우연적 응집도 : 가장 좋지 않은 응집도다. 모듈 내부의 각 구성요소들이 아무런 관련 없이 구성된 형태다. 논리적 응집도와 비슷하지만, 유사한 성격이나 형태가 없고 모듈 수정이 사이드이펙트를 발생시킬 가능성이 매우 높다.

## 📍결합도

- 서로 다른 모듈간에 상호 의존하는 정도 또는 연관된 관계를 의미한다. 결합도가 높은 클래스는 다른 클래스와 연관된 정도가 높아서 해당 클래스를 변경하면 연관된 클래스도 변경해야하고 다른 코드에서 클래스를 재사용하기도 어렵다
- 결합도는 결합 정도에 따라 6개로 구분된다.
  - 자료 결합도 :
  - 스탬프 결합도 :
  - 제어 결합도 :
  - 외부 결합도 :
  - 공통 결합도 :
  - 내용 결합도 :

#### 결론적으로 결합도는 낮고, 응집도는 높게 모듈을 설계하는 것이 좋다고 한다!

## 📍

### 👀 참고

[결합도와 응집도는 무엇일까?](https://madplay.github.io/post/coupling-and-cohesion-in-software-engineering)
